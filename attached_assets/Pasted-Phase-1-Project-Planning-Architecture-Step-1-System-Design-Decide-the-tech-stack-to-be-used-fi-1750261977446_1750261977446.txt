Phase 1: Project Planning & Architecture
Step 1: System Design
Decide the tech stack to be used first (Python/Flask, Node.js/Express, etc.)
Get the data flow and component interactions

Step 2: Break Down Components
Give a detailed breakdown of all required modules
Get a project file structure
Understand dependencies and requirements

Phase 2: Core Development (Component by Component)
Step 3: Web Scraping Module
Create a proper:
- Discourse forum scraper (We do not have Discourse API key, use the link: https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34 with content from 1 Jan 2025 - 14 Apr 2025) 
- Course content scraper (https://tds.s-anand.net/#/2025-01/ with content for TDS Jan 2025 as on 15 Apr 2025.)
- Data cleaning and processing scripts
Step 4: Data Storage & Indexing
Get complete with:
- Database schema design
- Data indexing for fast retrieval
- Vector embeddings for semantic search
Step 5: Question-Answering Engine
Get assistance with:
- Text similarity matching
- Context extraction algorithms
- Response generation logic
Step 6: API Development
Create the given:
- REST API endpoints
- JSON request/response handlers
- Image processing (base64 decoding)
- Error handling and validation
Phase 3: Integration & Optimization
Step 7: Main Application
Request:
- Main application file that ties everything together
- Configuration management
- Logging and monitoring
Step 8: Performance Optimization
Get help with:
- Caching strategies
- Response time optimization
- Memory management
Phase 4: Deployment Preparation
Step 9: Deployment Scripts
Generate:
- Requirements.txt / package.json
- vercel configuration such that the app can be directly deployed on vercel such that it can be tested using a .yaml file with 10 realistic questions
- Environment setup scripts
Step 10: Testing & Validation
Request:
- Unit tests for components
- Integration testing scripts
- Sample API calls for testing

As an aid to see if your application is behaving correctly, we have hosted the same promptfoo file on our server.
You can test your application against it.

The endpoint is:
34:100:231.127:8000

You will have to start your service and submit your application endpoint and provide your aipipe key.
We will run the promptfoo using your token and you will get to see what the evaluation shows.

Please note this is just an aid for those that had difficulty configuring your promptfoo on your local system.
This is NOT the final evaluation.